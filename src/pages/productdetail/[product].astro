---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";

export async function getStaticPaths() {
  const fetchSpearlyContent = async () => {
    try {
      const response = await fetch(
        `https://api.spearly.com/content_types/products/contents`,
        {
          headers: {
            Authorization: "Bearer " + process.env.SPEARLY_API_KEY,
            Accept: "application/vnd.spearly.v2+json",
          },
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error(error);
      return null;
    }
  };

  const response = await fetchSpearlyContent().then((data) => {
    let aliasAry: any[] = [];
    data.data.map((d: any) => {
      aliasAry.push(d.attributes.content_alias);
    });
    return aliasAry;
  });

  const formattedData = await response.map((alias) => ({
    params: { product: alias },
  }));

  return formattedData;
}

// URLパラメータから'product'を取得
const { product } = Astro.params;

const fetchProductData = async (alias: any) => {
  try {
    const response = await fetch(
      `https://api.spearly.com/content_types/products/contents/${alias}`,
      {
        headers: {
          Authorization: "Bearer " + process.env.SPEARLY_API_KEY,
          Accept: "application/vnd.spearly.v2+json",
        },
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error(error);
    return null;
  }
};

const productData = await fetchProductData(product);
---

<Layout title={productData.data.values.name}>
  <Header />
  <main>
    <h1><span class="text-gradient">{productData.data.values.name}</span></h1>
    <p class="instructions">{productData.data.values.description}</p>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 2rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    gap: 1rem;
    padding: 0;
  }
</style>
